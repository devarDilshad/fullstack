// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  product_id Int     @id @default(autoincrement())
  name       String
  price      Decimal

  orders Order[]
}

model Client {
  client_id         Int      @id @default(autoincrement())
  organization_name String?
  client_name       String   @unique
  client_number     String   @unique
  email             String
  client_address    String
  shipping_address  String
  client_balance    Float    @default(0)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  Payments Payment[]
  Invoices Invoice[]
}

model Invoice {
  invoice_id     Int      @id @default(autoincrement())
  client_id      Int
  invoice_date   DateTime
  total_amount   Float
  paid_amount    Float    @default(0)
  payment_status String
  invoice_status String   @default("Pending")

  Client          Client           @relation(fields: [client_id], references: [client_id])
  PaymentInvoices PaymentInvoice[]
  orders          Order[]
  Return          Return[]
}

model Payment {
  payment_id     Int      @id @default(autoincrement())
  client_id      Int
  payment_type   String
  payment_amount Float
  payment_date   DateTime
  status         String
  unallocated    Boolean  @default(true)

  Client          Client           @relation(fields: [client_id], references: [client_id])
  PaymentInvoices PaymentInvoice[]
}

model PaymentInvoice {
  id               Int   @id @default(autoincrement())
  payment_id       Int
  invoice_id       Int
  amount_allocated Float

  Payment Payment @relation(fields: [payment_id], references: [payment_id])
  Invoice Invoice @relation(fields: [invoice_id], references: [invoice_id])

  @@unique([payment_id, invoice_id])
}

model Order {
  order_id     String   @id @default(cuid()) // Primary key with default value
  invoice_id   Int // Foreign key reference to the Invoice model
  product_id   Int // Foreign key reference to the Product model
  order_date   DateTime
  order_desc   String
  quantity     Int
  unit_price   Float
  total_amount Float
  order_status String   @default("Pending")

  // Relationships
  Invoice Invoice  @relation(fields: [invoice_id], references: [invoice_id])
  product Product  @relation(fields: [product_id], references: [product_id])
  Return  Return[]
}

model Return {
  return_id   String   @id @default(cuid()) // Primary key with default value
  invoice_id  Int // Foreign key reference to the Invoice model
  return_date DateTime
  reason      String
  order_id    String // Foreign key reference to the Order model

  // Relationships
  Invoice Invoice @relation(fields: [invoice_id], references: [invoice_id])
  Order   Order   @relation(fields: [order_id], references: [order_id])
}

// model Return {
//   return_id   String   @id @default(cuid()) // Unique identifier for the return
//   order_id    String   // Foreign key reference to the Order model
//   return_date DateTime // Date when the return was processed
//   reason      String   // Reason for the return
//   quantity    Int      // Quantity of items returned
//   amount      Float    // Amount to be refunded (optional)

//   // Relationships
//   Order       Order    @relation(fields: [order_id], references: [order_id])
// }

